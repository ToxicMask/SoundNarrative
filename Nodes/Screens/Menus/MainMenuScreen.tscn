[gd_scene load_steps=18 format=2]

[ext_resource path="res://Scripts/GameSystems/MainMenu.gd" type="Script" id=1]
[ext_resource path="res://Assets/Images/Render/Scene0/Render0x1.png" type="Texture" id=2]
[ext_resource path="res://Resources/Shaders/TelevisionShader.gdshader" type="Shader" id=3]
[ext_resource path="res://Resources/Themes/MainMenuTheme.tres" type="Theme" id=4]
[ext_resource path="res://Resources/Fonts/Helvetica/Helvetica-Oblique.ttf" type="DynamicFontData" id=5]
[ext_resource path="res://Assets/Images/Render/Scene1/Render1x1A.png" type="Texture" id=6]
[ext_resource path="res://Assets/Images/Render/Scene2/Render2x1.png" type="Texture" id=7]
[ext_resource path="res://Scripts/GameSystems/SoundController.gd" type="Script" id=8]
[ext_resource path="res://Assets/Audio/Ambience/main_menu_static.wav" type="AudioStream" id=9]

[sub_resource type="OpenSimplexNoise" id=1]
octaves = 4
persistence = 1.0

[sub_resource type="NoiseTexture" id=2]
width = 256
height = 1
seamless = true
noise = SubResource( 1 )

[sub_resource type="ShaderMaterial" id=3]
shader = ExtResource( 3 )
shader_param/staticOffset = 0.0
shader_param/grayscaleFactor = true
shader_param/noiseFactor = 0.65
shader_param/noiseBright = 0.01
shader_param/tint = Color( 0.5271, 0.7, 0.518, 1 )
shader_param/noiseTexture = SubResource( 2 )

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;


uniform bool grayscaleFactor = true;
uniform float noiseFactor : hint_range(0, 1) = 0.3;
uniform vec4 tint : hint_color;
uniform vec4 noiseColor : hint_color;


float random (vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) * 43758.5453123);
}


void fragment() {
	vec4 texturePixel = texture(TEXTURE, UV);
	vec4 mixColor = vec4(1);
	
	vec4 grayscale = vec4( vec3((texturePixel.r + texturePixel.g + texturePixel.b) / 3.0), 1);
	grayscale.a = texturePixel.a;
	mixColor = mix(mixColor, grayscale, float(grayscaleFactor));

	// Noise Factor
	vec4 whiteNoise = vec4((random(UV * TIME / 1.0)));
	mixColor = mix(mixColor * tint, noiseColor, float(noiseFactor >= whiteNoise.r ));
	mixColor.a = mix(0.0, mixColor.a, texturePixel.a);
	
	
	// Set Color
	COLOR = mixColor;
}

"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 7 )
shader_param/grayscaleFactor = true
shader_param/noiseFactor = 0.35
shader_param/tint = Color( 1, 1, 1, 1 )
shader_param/noiseColor = Color( 0.419608, 1, 0.258824, 0.403922 )

[sub_resource type="DynamicFont" id=6]
font_data = ExtResource( 5 )

[sub_resource type="Animation" id=4]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("AllEllements/TextureRect:material:shader_param/staticOffset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("AllEllements/TextureRect:material:shader_param/tint")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0.5271, 0.7, 0.518, 1 ) ]
}

[sub_resource type="Animation" id=5]
resource_name = "StandardAnimation"
length = 30.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("AllEllements/TextureRect:material:shader_param/staticOffset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 29.9 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("AllEllements/TextureRect:material:shader_param/tint")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 5, 10, 15, 20, 25.1, 30 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 0.3765, 0.5, 0.37, 1 ), Color( 0.561, 0.75, 0.5475, 1 ), Color( 0.3765, 0.5, 0.37, 1 ), Color( 0.561, 0.75, 0.5475, 1 ), Color( 0.3765, 0.5, 0.37, 1 ), Color( 0.561, 0.75, 0.5475, 1 ), Color( 0.3765, 0.5, 0.37, 1 ) ]
}

[node name="MainMenu" type="Node" groups=["DeleteOnChangeScene"]]
script = ExtResource( 1 )
random_textures = [ ExtResource( 2 ), ExtResource( 6 ), ExtResource( 7 ) ]

[node name="SoundController" type="Node" parent="."]
script = ExtResource( 8 )
ambience_stream = ExtResource( 9 )
autoplay = true

[node name="AllEllements" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 4 )

[node name="TextureRect" type="TextureRect" parent="AllEllements"]
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 6 )

[node name="CenterElements" type="CenterContainer" parent="AllEllements"]
anchor_left = 0.5
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = 222.0
margin_right = 462.0

[node name="ButtonContainer" type="VBoxContainer" parent="AllEllements/CenterElements"]
margin_top = 200.0
margin_right = 240.0
margin_bottom = 400.0
rect_min_size = Vector2( 240, 0 )
custom_constants/separation = 12
alignment = 1

[node name="PlayButton" type="Button" parent="AllEllements/CenterElements/ButtonContainer"]
margin_right = 240.0
margin_bottom = 48.0
rect_min_size = Vector2( 0, 48 )
focus_mode = 0
enabled_focus_mode = 0
text = "COMEÇAR"

[node name="HSeparator" type="HSeparator" parent="AllEllements/CenterElements/ButtonContainer"]
self_modulate = Color( 1, 1, 1, 0 )
margin_top = 60.0
margin_right = 240.0
margin_bottom = 64.0

[node name="Credits Button" type="Button" parent="AllEllements/CenterElements/ButtonContainer"]
margin_top = 76.0
margin_right = 240.0
margin_bottom = 124.0
rect_min_size = Vector2( 0, 48 )
focus_mode = 0
enabled_focus_mode = 0
text = "CRÉDITOS"

[node name="HSeparator2" type="HSeparator" parent="AllEllements/CenterElements/ButtonContainer"]
self_modulate = Color( 1, 1, 1, 0 )
margin_top = 136.0
margin_right = 240.0
margin_bottom = 140.0

[node name="QuitButton" type="Button" parent="AllEllements/CenterElements/ButtonContainer"]
margin_top = 152.0
margin_right = 240.0
margin_bottom = 200.0
rect_min_size = Vector2( 0, 48 )
focus_mode = 0
enabled_focus_mode = 0
text = "SAIR"

[node name="Panel" type="Panel" parent="AllEllements/CenterElements"]
margin_left = 120.0
margin_top = 300.0
margin_right = 120.0
margin_bottom = 300.0

[node name="TitleLabel" type="Label" parent="AllEllements"]
material = SubResource( 10 )
anchor_right = 0.654
anchor_bottom = 1.0
margin_left = 2.0
margin_top = 2.0
margin_right = 0.303955
margin_bottom = -128.0
text = "COLINA DOS
SUSSUROS"
align = 1
valign = 1

[node name="Copyright" type="Label" parent="AllEllements"]
anchor_right = 0.654
anchor_bottom = 1.0
margin_left = 34.0
margin_top = 529.0
margin_right = -401.696
margin_bottom = -12.0
custom_fonts/font = SubResource( 6 )
text = "Um jogo feito por Tomás Xavier & Pedro Prada"
valign = 1

[node name="MenuAnimation" type="AnimationPlayer" parent="."]
autoplay = "StandardAnimation"
anims/RESET = SubResource( 4 )
anims/StandardAnimation = SubResource( 5 )

[connection signal="pressed" from="AllEllements/CenterElements/ButtonContainer/PlayButton" to="." method="_start_new_game"]
[connection signal="pressed" from="AllEllements/CenterElements/ButtonContainer/Credits Button" to="." method="_go_to_credits"]
[connection signal="pressed" from="AllEllements/CenterElements/ButtonContainer/QuitButton" to="." method="_close_app"]
